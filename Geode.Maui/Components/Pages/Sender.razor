@page "/sender"

<h3>Sender</h3>
<link rel="stylesheet" href="css/rtcstyles.css">
    <div>
        <input placeholder="Username" type="text" id="username-input"/><br>
        <button onclick="sendUsername()">Send SDP</button>
        <button onclick="startCall()">Start Call</button>
    </div>
    <div id="video-call-div">
        <video muted id="local-video" autoplay></video>
        <video id="remote-video" autoplay></video>
        <div class="actions-div">
            <button onclick="muteVideo()">Mute video</button>
            <button onclick="muteAudio()">Mute audio</button>
        </div>
    </div>

<script>
    const rtcHub = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7077/webrtc")
        .build()

    rtcHub.on("ReceiveSignallingData", (data) => {
        console.log("Received message from hub")
        handleSignallingData(data)
    });

    rtcHub.start().then(() => {
        console.log("Connection established.");
    }).catch(err => console.error(err));

    function handleSignallingData(data) {
        switch (data.type) {
            case "answer":
                console.log("Processing answer: ", data.value)
                peerConn.setRemoteDescription(JSON.parse(data.value))
                break
            case "candidate":
                console.log("Processing candidate: ", data.value)
                peerConn.addIceCandidate(JSON.parse(data.value))
                break
        }
    }

    let username
    function sendUsername() {
        username = document.getElementById("username-input").value
        rtcHub.invoke("StoreUser", username)
    }

    let localStream
    let peerConn
    function startCall() {
        document.getElementById("video-call-div")
            .style.display = "inline"

        navigator.getUserMedia({
            video: {
                frameRate: 24,
                width: {
                    min: 480, ideal: 720, max: 1280
                },
                aspectRatio: 1.33333
            },
            audio: true
        }, (stream) => {
            localStream = stream
            document.getElementById("local-video").srcObject = localStream

            let configuration = {
                iceServers: [
                    {
                        "urls": ["stun:stun.l.google.com:19302",
                            "stun:stun1.l.google.com:19302",
                            "stun:stun2.l.google.com:19302"]
                    }
                ]
            }
                
            peerConn = new RTCPeerConnection(configuration)
            peerConn.addStream(localStream)

            peerConn.onaddstream = (e) => {
                document.getElementById("remote-video")
                    .srcObject = e.stream
            }

            peerConn.onicecandidate = ((e) => {
                if (e.candidate == null)
                    return
                username = document.getElementById("username-input").value
                rtcHub.invoke("StoreCandidate", username, JSON.stringify(e.candidate))
            })

            createAndSendOffer()
        }, (error) => {
            console.log(error)
        })
    }

    function createAndSendOffer() {
        peerConn.createOffer((offer) => {
            username = document.getElementById("username-input").value
            rtcHub.invoke("StoreOffer", username, JSON.stringify(offer))
            peerConn.setLocalDescription(offer)
        }, (error) => {
            console.log(error)
        })
    }

    let isAudio = true
    function muteAudio() {
        isAudio = !isAudio
        localStream.getAudioTracks()[0].enabled = isAudio
    }

    let isVideo = true
    function muteVideo() {
        isVideo = !isVideo
        localStream.getVideoTracks()[0].enabled = isVideo
    }
</script>
