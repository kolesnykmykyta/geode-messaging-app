@page "/call/{Remote}"

@inject IJSRuntime JsRuntime

<div id="video-call-div">
    <video muted id="local-video" autoplay></video>
    <video id="remote-video" autoplay></video>
    <div class="actions-div">
        <button onclick="initializeHubConnection()">Init hub</button>
        <button onclick="joinCall('@Remote')">Join call</button>
        <button onclick="muteVideo()">Mute video</button>
        <button onclick="muteAudio()">Mute audio</button>
    </div>
</div>

@code {
    [Parameter]
    public string? Remote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // await JsRuntime.InvokeVoidAsync("joinCall", Remote);
    }
}

<script>
    let rtcHub
    let localStream
    let peerConnection
    let receiver

    function joinCall(username) {
        receiver = username
        setupPeerConnection()
    }

    function handleOffer(data) {
        console.log("Processing offer: ", data)

        peerConn.setRemoteDescription(JSON.parse(data))
        peerConn.createAnswer((answer) => {
            peerConn.setLocalDescription(answer)
            console.log("Sending answer: ", data)
            connection.invoke("SendAnswer", receiver, JSON.stringify(answer))
        }, error => {
            console.log(error)
        })
    }

    function handleAnswer(data) {
        console.log("Processing answer: ", data)
        peerConnection.setRemoteDescription(JSON.parse(data))
    }

    function handleCandidate(data) {
        console.log("Processing candidate: ", data)
        peerConnection.addIceCandidate(JSON.parse(data))
    }

    function initializeHubConnection() {
        accessToken = localStorage.getItem("BearerToken")
        console.log("Bearer token: ", accessToken)
        rtcHub = new signalR.HubConnectionBuilder()
            .withUrl("https://geode-api-dev.azurewebsites.net/webrtc", {
                accessTokenFactory: () => accessToken
            })
            .build()

        rtcHub.on("ReceiveAnswer", (data) => handleAnswer(data))
        rtcHub.on("ReceiveCandidate", (data) => handleCandidate(data))
        rtcHub.on("ReceiveOffer", (data) => handleOffer(data))

        rtcHub.start().then(() => console.log("Connection established."))
            .catch(err => console.error(err));
    }

    function setupPeerConnection() {
        document.getElementById("video-call-div")
            .style.display = "inline"

        navigator.getUserMedia({
            video: {
                frameRate: 24,
                width: {
                    min: 480, ideal: 720, max: 1280
                },
                aspectRatio: 1.33333
            },
            audio: true
        }, (stream) => {
            localStream = stream
            document.getElementById("local-video").srcObject = localStream
            const configuration = {
                iceServers: [
                    {
                        "urls": ["stun:stun.l.google.com:19302",
                            "stun:stun1.l.google.com:19302",
                            "stun:stun2.l.google.com:19302"]
                    }
                ]
            }

            peerConnection = new RTCPeerConnection(configuration)
            peerConnection.addStream(localStream)

            peerConnection.onaddstream = (e) => {
                document.getElementById("remote-video")
                    .srcObject = e.stream
            }
            peerConnection.onicecandidate = ((e) => {
                if (e.candidate == null)
                    return
                rtcHub.invoke("ProcessCandidate", receiver, JSON.stringify(e.candidate))
            })

            createOfferAndJoinCall()
        }, (error) => {
            console.log(error)
        })
    }

    function createOfferAndJoinCall() {
        peerConnection.createOffer((offer) => {
            rtcHub.invoke("JoinCall", receiver, JSON.stringify(offer))
            peerConnection.setLocalDescription(offer)
        }, (error) => {
            console.log(error)
        })
    }

    // Call settings
    let isAudio = true
    function muteAudio() {
        isAudio = !isAudio
        localStream.getAudioTracks()[0].enabled = isAudio
    }

    let isVideo = true
    function muteVideo() {
        isVideo = !isVideo
        localStream.getVideoTracks()[0].enabled = isVideo
    }

</script>
